section (#subclasses) {

    h2 "TabBuilder Subclasses"

    p
    {
        "In order to help facilitate a semantic HTML experience and self-documenting code, there are numerous TagBuilder subclasses at your disposal to quickly create specific elements but also semantic-driven elements . These subclasses have unique methods respective to their purpose, for example, the TableBuilder has an  "
        code "addRow()" html_encode(" method to quickly add a <tr> with data and the ListBuilder has an ")
        code "addSublist()" html_encode(" method to add a sublist to a <ul> or <ol>, the semantic proper way by wrapping the sublist in a <li>")
    }

    #vars
        subclasses json("&./subclasses")
    #end

    each sort(@subclasses) {
        import "&./builders/_${ @this | lower }"
    }

} // end of section#subclasses

section
{

    h2 (#SVGBuilder) "SVGBuilder"

    h3 { a (href="#SVGBuilder") "SVGBuilder" }

    p html_encode("This element builder is used to create XML-based markup language for describing two-dimensional based vector graphics")

    details (open) {

        summary "Documentation"

        import "templates/subclass_methods" {
            name    "constructor"
            args    "viewBox?: string; id?: string; xmlns?: string"
            returns "SVGBuilder"
            usage   "new SVGBuilder('0 0 500 500', 'mySVG');"
            refs    "https://developer.mozilla.org/en-US/docs/Web/SVG"
        }

        import "articles/methods/abstract" {
            returns "SVGBuilder<SVGElement>"
            usage   "new SVGBuilder('0 0 500 500', 'mySVG')"
        }
    }

} // end of section

section
{

    h2 (#SVGElementBuilder) "SVGElementBuilder<T extends SVGElement>"

    h3 { a (href="#SVGElementBuilder") "SVGElementBuilder<T extends SVGElement>" }

    p html_encode("This element builder is used to create any kind of SVG element, or SVG animation")

    details (open) {

        summary "Documentation"

        import "templates/subclass_methods" {
            name    "constructor"
            args    "element: string; xmlns?: string; id?: string"
            returns "SVGElementBuilder<T extends SVGElement>"
            usage   "new SVGElementBuilder<SVGCircleElement>('circle', 'myCircleSVG')"
            refs    "https://developer.mozilla.org/en-US/docs/Web/SVG/Element"
        }

        import "articles/methods/abstract" {
            returns "SVGElementBuilder<T extends SVGElement>"
            usage   "new SVGElementBuilder<SVGCircleElement>('circle', 'myCircleSVG')"
        }

        import "templates/methods" {
            name    "fill"
            args    "value: string"
            returns "SVGElementBuilder<T extends SVGElement>"
            usage   "new SVGElementBuilder<SVGCircleElement>('circle', 'myCircleSVG').fill('rgba(0,0,0,0.5)');"
        }

        import "templates/methods" {
            name    "stroke"
            args    "stroke: string; width: string | number"
            returns "SVGElementBuilder<T extends SVGElement>"
            usage   "new SVGElementBuilder<SVGCircleElement>('circle', 'myCircleSVG').stroke('rgba(0,0,0,0.5)', 2);"
        }

        import "templates/methods" {
            name    "preserveAspectRatio"
            args    "value: string"
            returns "SVGElementBuilder<T extends SVGElement>"
            usage   "new SVGElementBuilder<SVGCircleElement>('circle', 'myCircleSVG').preserveAspectRatio('xMidYMid meet');"
        }

        import "templates/methods" {
            name    "x"
            args    "value: string | number"
            returns "SVGElementBuilder<T extends SVGElement>"
            usage   "new SVGElementBuilder<SVGCircleElement>('circle', 'myCircleSVG').x(25);"
        }

        import "templates/methods" {
            name    "y"
            args    "value: string | number"
            returns "SVGElementBuilder<T extends SVGElement>"
            usage   "new SVGElementBuilder<SVGCircleElement>('circle', 'myCircleSVG').y(25);"
        }

        import "templates/methods" {
            name    "viewBox"
            args    "viewBox: string"
            returns "SVGElementBuilder<T extends SVGElement>"
            usage   "new SVGElementBuilder<SVGCircleElement>('circle', 'myCircleSVG').viewBox('0 0 500 500');"
        }
    }

}