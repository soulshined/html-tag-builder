section (#methods) {

    h2 "TagBuilder Pattern Methods"

    import "articles/methods/abstract" {
        returns "TagBuilder<HTMLElement>"
        usage   "new TagBuilder('div')"
    }

    import "templates/methods" {
        name        "accessKey"
        args        "value: string"
        returns     "TagBuilder<HTMLElement>"
        exactId     "TagBuilder.accessKey"
        description "Provides a hint for generating a keyboard shortcut for the current element"
        refs        "
            https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
        "

        usage       "new TagBuilder('div').accessKey('s');"
    }

    import "templates/methods" {
        name        "inputmode"
        args        "value: string"
        returns     "TagBuilder<HTMLElement>"
        exactId     "TagBuilder.inputmode"
        description "Provides a hint to browsers as to the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on &lt;input&gt; elements, but is usable on any element while in contenteditable mode"
        refs        "
            https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
        "

        usage       "new TagBuilder('div').inputmode('email');"
    }

    import "templates/methods" {
        name        "contentEditable"
        args        ""
        exactId     "TagBuilder.contentEditable"
        returns     "TagBuilder<HTMLElement>"
        description "Coerce an element into being editable by the user. The browser modifies this tag to allow editing"
        refs        "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable"
        usage       "new TagBuilder('div').contentEditable();"
    }

    import "templates/methods" {
        name        "dir"
        args        "value: 'ltr' | 'rtl' | 'auto'"
        returns     "TagBuilder<HTMLElement>"
        exactId     "TagBuilder.dir"
        description "Directionality of the element's text"
        usage       "new TagBuilder('div').dir('ltr');"
        refs        "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir"
    }

    import "templates/methods" {
        name        "draggable"
        args        ""
        returns     "TagBuilder<HTMLElement>"
        exactId     "TagBuilder.draggable"
        description "Coerces an element into being draggable. Use the Drag and Drop API"
        refs        "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable"
        usage       "new TagBuilder('div').draggable();"
    }

    import "templates/methods" {
        name        "hidden"
        args        ""
        returns     "TagBuilder<HTMLElement>"
        exactId     "TagBuilder.hidden"
        description "Coerces an element to indicate that it is not yet, or is no longer, relevant. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown"
        refs        "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden"
        usage       "new TagBuilder('div').hidden();"
    }

    import "templates/methods" {
        name        "spellcheck"
        args        ""
        exactId     "TagBuilder.spellcheck"
        returns     "TagBuilder<HTMLElement>"
        description "Coerce the element to be checked for spelling errors"
        refs        "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck"
        usage       "new TagBuilder('div').spellcheck();"
    }

    import "templates/methods" {
        name        "title"
        args        "title: string"
        returns     "TagBuilder<HTMLElement>"
        exactId     "TagBuilder.title"
        description "Sets the text representing advisory information related to the element it belongs to. Such information can typically, but not necessarily, be presented to the user as a tooltip"
        refs        "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title"
        usage       "new TagBuilder('div').title('foobar');"
    }

    import "templates/methods" {
        name        "innerText"
        args        "text: string"
        returns     "TagBuilder<HTMLElement>"
        exactId     "TagBuilder.innerText"
        description {
            p 'Represents the "rendered" text content of a node and its descendants'
            p '`innerText` is easily confused with Node.textContent, but there are important differences between the two. Basically, `innerText` is aware of the rendered appearance of text, while `textContent` is not'
        }
        refs        "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText"
        usage       "new TagBuilder('div').innerText('foobar');"
    }

    import "templates/methods" {
        name        "autocapitalize"
        args        "value: 'off' | 'on' | 'none' | 'sentences' | 'words' | 'characters'"
        returns     "TagBuilder<HTMLElement>"
        exactId     "TagBuilder.autocapitalize"
        description "Controls whether and how text input is automatically capitalized as it is entered/edited by the user"
        refs        "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize"
        usage       "new TagBuilder('div').autocapitalize('words');"
    }

    import "templates/methods" {
        name        "caret"
        args        "color: string"
        returns     "TagBuilder<HTMLElement>"
        exactId     "TagBuilder.caret"
        description "Set the css caret-color property of the element"
        usage       "new TagBuilder('div').caret('red');

//or with any other CSS color value
new TagBuilder('div').caret('#FFFFFF');"

        refs        "https://developer.mozilla.org/en-US/docs/Web/CSS/caret-color"
    }

    import "templates/methods" {
        name        "textcase"
        args        "transform: 'uppercase' | 'lowercase' | 'none' | 'capitalize' | 'inherit'"
        returns     "TagBuilder<HTMLElement>"
        exactId     "TagBuilder.textcase"
        description "Transform text to a specfic case using the CSS text-transform property"
        usage       "new TagBuilder('div').textcase('uppercase');"
        refs        "https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform"
    }

    import "templates/methods" {
        name        "visibility"
        args        "value: 'visible' | 'hidden' | 'collapse'"
        exactId     "TagBuilder.visibility"
        returns     "TagBuilder<HTMLElement>"
        description html_encode("The visibility CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a `<table>`")
        refs        "https://developer.mozilla.org/en-US/docs/Web/CSS/visibility"
        usage       "new TagBuilder('div').visibility('hidden');"
    }

    import "templates/methods" {
        name        "screenReaderOnly"
        args        ""
        exactId     "TagBuilder.screenReaderOnly"
        returns     "TagBuilder<HTMLElement>"
        description {
            p
            {
                "Set the element to explicitly be for screen readers only, using the "
                a (href="https://www.w3.org/WAI/tutorials/forms/labels/#note-on-hiding-elements" target=_blank) "WCAG Standards"
            }

            p
            {
                "This will automatically add the following styles inline to the element:"

                pre
                {
                    code "element {
    border: 0,
    clip: rect(0 0 0 0),
    height: 1px,
    margin: -1px,
    overflow: hidden,
    padding: 0,
    position: absolute,
    width: 1px
}"
                }
            }
        } // end of description
        usage       "new TagBuilder('div').screenReaderOnly();"
    } // end of import

    import "templates/methods" {
        name        "static TagBuilder.parse"
        args        "html: string"
        returns     "TagBuilder<HTMLElement>"
        exactId     "TagBuilder.parse"
        description {
            p "Parse an html string of HTML elements and cast that element to a TagBuilder"
            p "Please note, this only considers HTMLElement.nodeType of 1. Meaning this ignores comments, and document fragments and text nodes etc"
            p "This method honors attributes in the string"
        }
        usage       "const tag = TagBuilder.parse('<ul><li>foo</li><li>bar</li><li>baz</li><li>dad</li></ul>');"
    }

}